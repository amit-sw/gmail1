// This is a placeholder for aws-exports.js which will be generated by Amplify CLI
const awsconfig = {
    // Example structure - THIS WILL BE AUTO-GENERATED by `amplify init` and `amplify add auth`
    // "aws_project_region": "us-east-1",
    // "aws_cognito_identity_pool_id": "us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    // "aws_cognito_region": "us-east-1",
    // "aws_user_pools_id": "us-east-1_xxxxxxxxx",
    // "aws_user_pools_web_client_id": "xxxxxxxxxxxxxxxxxxxxxxxxxx",
    // "oauth": {},
    // "aws_appsync_graphqlEndpoint": "https://xxxxxxxxxxxxxxxxxxxxxx.appsync-api.us-east-1.amazonaws.com/graphql",
    // "aws_appsync_region": "us-east-1",
    // "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS"
};

Amplify.configure(awsconfig);

const authContainer = document.getElementById('auth-container');
const appContainer = document.getElementById('app-container');
const logoutButton = document.getElementById('logout-button');
const userIdElement = document.getElementById('user-id');
const refreshTokenElement = document.getElementById('refresh-token');
const processingStatusElement = document.getElementById('processing-status');
const errorMessageElement = document.getElementById('error-message');

// Use Amplify's built-in UI component for authentication
const authUI = new aws_amplify_ui.AuthUI(
  document.getElementById('amplify-auth-container'),
  () => {
    // This callback is executed after a successful sign-in
    checkUser(); // Re-check user status and update UI
  },
  (error) => console.error('Auth UI error:', error) // Handle errors from the Auth UI
);


const checkUser = async () => {
    try {
        const user = await Amplify.Auth.currentAuthenticatedUser();
        console.log('User:', user);
        authContainer.style.display = 'none';
        appContainer.style.display = 'block';
        userIdElement.textContent = user.username || (user.attributes && user.attributes.email) || 'N/A'; // Cognito username or email

        // Fetch user-specific data from DynamoDB via Amplify API (GraphQL)
        await fetchUserData(user.username || user.attributes.sub); // Use username or sub as the key

    } catch (error) {
        console.log('Not signed in', error);
        authContainer.style.display = 'block';
        appContainer.style.display = 'none';
        errorMessageElement.textContent = ''; // Clear previous errors
    }
};

const fetchUserData = async (currentUserId) => {
    // This function assumes you have a GraphQL API configured with Amplify
    // and a query named `getUserToken` that accepts `userId` as an argument.
    // The UserToken type in your GraphQL schema should have `userId` and `refreshToken`.
    // Ensure your DynamoDB table's primary key for UserTokens is `userId`.
    // Also, ensure Cognito authorization rules are set up in your GraphQL schema
    // so users can only fetch their own data.
    // Example GraphQL query (define this in your schema and use Amplify codegen or manual definition):
    /*
    query GetUserToken($userId: String!) {
      getUserToken(userId: $userId) {
        userId
        refreshToken
        // processingStatus # Add this when available
      }
    }
    */

    // Placeholder for the GraphQL query name. This will depend on your `amplify add api` setup.
    // Let's assume the query to get a user's token is `getUserToken` and it's part of a type,
    // or directly queryable if your schema allows it.
    // For simplicity, we'll use a placeholder name. The actual implementation will
    // depend on the GraphQL schema generated by Amplify.

    // The `userId` used for the query MUST match the field designated as the owner
    // in your GraphQL schema's @auth rules for Cognito User Pools.
    // Typically, this is `owner` which maps to `username` or `sub` from the Cognito token.

    const query = `
        query GetUserToken($userId: String!) {
          getUserToken(userId: $userId) {
            userId
            refreshToken
            # processingStatus # Uncomment when this field is added to your DynamoDB table and GraphQL schema
          }
        }
    `;

    try {
        // Ensure the API category is configured if not using the default 'aws_appsync_graphqlEndpoint'
        const response = await Amplify.API.graphql({
            query: query,
            variables: { userId: currentUserId }, // Pass the authenticated user's ID
            // authMode: 'AMAZON_COGNITO_USER_POOLS' // This is often default when auth is configured
        });

        console.log('API Response:', response);

        const userTokenData = response.data.getUserToken;

        if (userTokenData) {
            refreshTokenElement.textContent = userTokenData.refreshToken;
            // When processingStatus is available in DynamoDB and your GraphQL schema:
            // processingStatusElement.textContent = userTokenData.processingStatus || 'Not yet available.';
        } else {
            refreshTokenElement.textContent = 'No token data found for this user.';
            processingStatusElement.textContent = 'N/A';
            errorMessageElement.textContent = 'Could not retrieve user token data. The record might not exist or there could be a permission issue.';
        }
    } catch (error) {
        console.error('Error fetching user data:', error);
        refreshTokenElement.textContent = 'Error fetching token.';
        processingStatusElement.textContent = 'Error fetching status.';
        errorMessageElement.textContent = `Error fetching data: ${error.message || JSON.stringify(error.errors || error)}`;
    }
};

logoutButton.addEventListener('click', async () => {
    try {
        await Amplify.Auth.signOut();
        // authUI.signOut(); // If using the AuthUI component for sign out
        authContainer.style.display = 'block';
        appContainer.style.display = 'none';
        userIdElement.textContent = '';
        refreshTokenElement.textContent = '';
        processingStatusElement.textContent = 'Not yet available.';
        errorMessageElement.textContent = '';
    } catch (error) {
        console.error('Error signing out: ', error);
        errorMessageElement.textContent = `Error signing out: ${error.message}`;
    }
});

// Initial check
window.addEventListener('DOMContentLoaded', () => {
    // Amplify's Auth listeners can also be used for more robust state management
    Amplify.Hub.listen('auth', ({ payload: { event, data } }) => {
        switch (event) {
            case 'signIn':
                console.log('user signed in');
                checkUser();
                break;
            case 'signOut':
                console.log('user signed out');
                authContainer.style.display = 'block';
                appContainer.style.display = 'none';
                userIdElement.textContent = '';
                refreshTokenElement.textContent = '';
                processingStatusElement.textContent = 'Not yet available.';
                errorMessageElement.textContent = '';
                break;
            case 'customOAuthState':
                // handle custom OAuth state
                break;
        }
    });

    checkUser();
});
